package com.epam.esm.service;

import com.epam.esm.dao.TagDao;
import com.epam.esm.entity.GiftCertificate;
import com.epam.esm.entity.Tag;
import com.epam.esm.exception.EntityAlreadyExistsException;
import com.epam.esm.exception.RequiredFieldsMissingException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class TagService {

    private final TagDao tagDao;

    private static final String REQUIRED_FIELD_MISSING = "Unfortunately, some required fields were missing.";
    private static final String TAG_WITH_NAME_ALREADY_EXISTS = "Unfortunately, a tag with this name already exists.";

    public TagService(TagDao tagDao) {
        this.tagDao = tagDao;
    }

    public List<Tag> getAll() {
        return tagDao.getAll();
    }

    public Tag getById(long id) {
        Optional<Tag> optionalTag = tagDao.getById(id);
        return optionalTag.orElse(null);
    }

    public Tag getByName(String name) {
        Optional<Tag> optionalTag = tagDao.getByName(name);
        return optionalTag.orElse(null);
    }

    public void create(Tag tag) throws RequiredFieldsMissingException, EntityAlreadyExistsException {
        if (tag.getName() == null) {
            throw new RequiredFieldsMissingException(REQUIRED_FIELD_MISSING);
        }

        Tag tagInDatabase = getByName(tag.getName());
        if (tagInDatabase != null) {
            throw new EntityAlreadyExistsException(TAG_WITH_NAME_ALREADY_EXISTS);
        }

        tagDao.create(tag);
    }

    public List<Long> createTagsIfNotPresent(List<Tag> tags) {
        List<Long> autoGeneratedIds = new ArrayList<>();
        for (Tag tag : tags) {
            String tagName = tag.getName();
            Optional<Tag> optionalTag = tagDao.getByName(tagName);

            if (optionalTag.isEmpty()) {
                Tag tagToCreate = new Tag(null, tagName);

                Long autoGeneratedId = tagDao.create(tagToCreate);
                autoGeneratedIds.add(autoGeneratedId);
            }
        }

        return autoGeneratedIds;
    }

    public List<Tag> getTagsByListOfIds(List<Long> tagIds) {
        List<Tag> tags = new ArrayList<>();

        for (Long tagId : tagIds) {
            Tag tag = getById(tagId);
            if (tag != null) {
                tags.add(tag);
            }
        }

        return tags;
    }

    public void deleteById(long id) {
        tagDao.deleteById(id);
    }
}
